#! /usr/bin/env python3

import argparse
import re

from lxml import etree


LEVELS = [
    'chapter',
    'section',
    'subsection',
    'subsubsection'
]


def prettify_text(text):
    # remove HTML the crude way
    text = re.sub(r'(<!--.*?-->|<[^>]*>)', '', text)
    # fix some random LaTeX stuff
    text = text.replace('e.g. ', 'e.g.\\ ')
    text = text.replace('&', '\\&')
    return text


def make_label(text):
    return re.sub('[^0-9a-zA-Z]+', '-', text.lower())


def print_label(text):
    print("\\label{{questionnaire:{}}}".format(
        make_label(text)))


def print_heading(title, level):
    print("\\{}{{{}}}".format(level, prettify_text(title)))


def handle_free(response):
    print('{} (length: {})'.format(response.find('format').text,
                                   response.find('length').text))
    hint = response.find('label').text
    if hint:
        print('Hint: {}'.format(prettify_text(hint)))


def handle_fixed(response):
    print('Fixed choice')
    print("\\begin{itemize}")
    for category in response.findall('category'):
        print('    \\item {} ({})'.format(
            prettify_text(category.find('label').text),
            category.find('value').text))
    print("\\end{itemize}")


RESPONSE_HANDLERS = {
    'free': handle_free,
    'fixed': handle_fixed,
}


def gather_infos(root):
    infos = {}

    for element in root.findall('questionnaireInfo'):
        infos[element.find('position').text.strip()] = element.find(
            'text').text.strip()

    return infos


def handle_question(question, level):
    print()

    print_heading(question.find('text').text, level)
    print_label('section-{}-question-{}'.format(
        question.getparent().attrib['id'],
        question.find('response').attrib['varName']))

    directive = question.find("directive[position='during']")
    if directive is not None and directive.find('text').text:
        print()
        print('{}'.format(prettify_text(directive.find('text').text)))

    # Present the possible sub-questions, if there is at least a described
    # entry
    subs = question.xpath('subQuestion/text[text()]/parent::*')
    if subs:
        print()
        print('Rate individually for:')
        print("\\begin{itemize}")
        for sub in subs:
            print('    \\item {} ({})'.format(
                prettify_text(sub.find('text').text),
                sub.attrib['varName'].split('_', 1)[1]))
        print("\\end{itemize}")

    # Present the potential answers
    print()
    print('\\paragraph{Answer type}')
    response = question.find('response')[0]
    RESPONSE_HANDLERS[response.tag](response)


def handle_section(section, level):
    print()
    print_heading(section.find(
        "sectionInfo[position='title']").find('text').text, level)
    print_label('section-{}'.format(section.attrib['id']))

    before = section.find("sectionInfo[position='before']")
    if before is not None:
        print()
        print(prettify_text(before.find('text').text))

    for question in section.findall('question'):
        handle_question(question, LEVELS[LEVELS.index(level) + 1])


def print_info(title, text, level):
    print()
    print_heading(title, level)
    print_label(title)
    print()
    print(prettify_text(text))


def process(root, level):

    infos = gather_infos(root)

    if 'before' in infos:
        print_info('Introduction', infos['before'], level)

    for section in root.findall('section'):
        handle_section(section, level)

    if 'after' in infos:
        print_info('Final remarks', infos['after'], level)


def main():
    parser = argparse.ArgumentParser(
        description='Hack to convert a queXML structure file to LaTeX',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument(
        '-l', '--start-level',
        choices=LEVELS[:3],
        default='section',
        help='LaTeX level to use for the top-level structures created.')
    parser.add_argument(
        'xml',
        metavar='FILE',
        type=argparse.FileType(),
        help='File to process')

    args = parser.parse_args()

    process(etree.parse(args.xml), args.start_level)


if __name__ == "__main__":
    main()
